pipeline {
    agent {
        kubernetes {
            label 'python'
            defaultContainer 'python'
            yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    some-label: python
spec:
  containers:
  - name: python
    image: fabiocuri/python-walkway:latest
    command:
    - cat
    tty: true
"""
        }
    }
    parameters {
        string(name: 'product_id', defaultValue: '9866P79', description: 'ID of the product (e.g. 9866P79, 73434P108, 156679P2, 73995P7, 70667P4)')
        choice(name: 'city', choices: ['same', 'different'], description: 'If same, only products from the same city are shown.')
        choice(name: 'supplier_code', choices: ['different', 'same'], description: 'If same, only products from the same supplier code are shown.')
        choice(name: 'embedding_model', choices: ['jina-embeddings-v2-base-en', 'gte-large'], description: 'Embedding model')
    }
    environment {
        LOG_FILE = 'experiment.log'
    }
    stages {
        stage('experiment-product-similarity') {
            steps {
                container('python') {
                    sh """
                    python3 src/experiment_product_similarity.py \
                        -product_id ${params.product_id} \
                        -city_name ${params.city} \
                        -supplier_code ${params.supplier_code} \
                        -embedding_model ${params.embedding_model} | tee ${env.LOG_FILE}
                    """
                }
            }
        }
        stage('ask-for-feedback') {
            steps {
                script {
                    def feedbackMessage = """
                    Please, provide feedback based on these key points:
                    1. Were the similarity scores too high (e.g. 0.99)?
                    2. Were the different similarity scores too close to each other?
                    3. Are the summarized texts from the related products coherent with the original product (e.g. are they somehow related?)
                    """
                    def userFeedback = input message: feedbackMessage, parameters: [string(name: 'feedback', defaultValue: '', description: 'Your feedback')]
                    currentBuild.description = userFeedback
                }
            }
        }
        stage('send-feedback-email') {
            steps {
                script {
                    def logs = readFile(env.LOG_FILE)
                    def emailBody = """
                        ${logs}

                        User Feedback:

                        ${currentBuild.description}
                    """
                    emailext(
                        attachLog: true, 
                        body: emailBody, 
                        subject: 'Experiment Feedback', 
                        to: 'fabio@walkway.ai'
                    )
                }
            }
        }
    }
}
